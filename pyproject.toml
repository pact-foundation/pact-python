#:schema https://json.schemastore.org/pyproject.json
[project]
description = "Tool for creating and verifying consumer-driven contracts using the Pact framework."
name        = "pact-python"

dynamic  = ["version"]
keywords = ["contract-testing", "pact", "testing"]
license  = { file = "LICENSE" }
readme   = "README.md"

authors = [
  { name = "Joshua Ellis", email = "josh@jpellis.me" },
  { name = "Matthew Balvanz", email = "matthew.balvanz@workiva.com" },
]
maintainers = [{ name = "Joshua Ellis", email = "josh@jpellis.me" }]

classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python",
  "Topic :: Software Development :: Testing",
]

requires-python = ">=3.9"

# Dependencies of Pact Python should be specified using the broadest range
# compatible version unless:
#
# - A specific feature is required in a new minor release
# - A minor version address vulnerability which directly impacts Pact Python
dependencies = [
  # Pact dependencies
  "pact-python-cli~=2.0",
  "pact-python-ffi~=0.4.0",
  # All other dependencies
  "cffi~=1.0",
  "click~=8.0",
  "fastapi~=0.0",
  "psutil~=7.0",
  "requests~=2.0",
  "six~=1.0",
  "typing-extensions~=4.0 ; python_version < '3.10'",
  "uvicorn~=0.0",
  "yarl~=1.0",
]

  [project.urls]
  "Bug Tracker"   = "https://github.com/pact-foundation/pact-python/issues"
  "Changelog"     = "https://github.com/pact-foundation/pact-python/blob/main/CHANGELOG.md"
  "Documentation" = "https://docs.pact.io"
  "Homepage"      = "https://pact.io"
  "Repository"    = "https://github.com/pact-foundation/pact-python"

  [project.scripts]
  pact-verifier = "pact.cli.verify:main"

  [project.optional-dependencies]
  # Linting and formatting tools use a more narrow specification to ensure
  # developper consistency. All other dependencies are as above.
  devel = [
    "pact-python-cli[devel]",
    "pact-python-ffi[devel]",
    "pact-python[devel-docs]",
    "pact-python[devel-test]",
    "pact-python[devel-types]",
    "ruff==0.12.4",
  ]
  devel-docs = [
    "mkdocs-literate-nav~=0.6",
    "mkdocs-material[imaging]~=9.4",
    "mkdocs-section-index~=0.3",
    "mkdocs_gen_files~=0.5",
    "mkdocstrings[python]~=0.23",
    "mkdocs~=1.5",
  ]
  devel-test = [
    "aiohttp[speedups]~=3.0",
    "coverage[toml]~=7.0",
    "flask[async]~=3.0",
    "grpcio~=1.0",
    "httpx~=0.0",
    "mock~=5.0",
    "protobuf~=6.0",
    "pytest-asyncio~=1.0",
    "pytest-bdd~=8.0",
    "pytest-cov~=6.0",
    "pytest-rerunfailures~=15.0",
    "pytest-xdist~=3.0",
    "pytest~=8.0",
    "testcontainers~=4.0",
    "uvicorn[standard]~=0.0",
  ]
  devel-types = [
    "mypy==1.17.0",
    "types-cffi~=1.0",
    "types-grpcio~=1.0",
    "types-protobuf~=6.0",
    "types-requests~=2.0",
  ]

[build-system]
build-backend = "hatchling.build"
requires      = ["hatch-vcs", "hatchling"]

################################################################################
## Hatch Configuration
################################################################################
[tool.hatch]

  [tool.hatch.version]
  source      = "vcs"
  tag-pattern = "^pact-python/(?P<version>[vV]?\\d+(?:\\.\\d+)*)$"

    [tool.hatch.version.raw-options]
    git_describe_command = [
      "git",
      "describe",
      "--tags",
      " --dirty",
      "--always",
      "--long",
      "--match",
      "pact-python/*",
    ]
    root = "."
    version_scheme = "no-guess-dev"

  [tool.hatch.build]

    [tool.hatch.build.hooks.vcs]
    version-file = "src/pact/__version__.py"

    [tool.hatch.build.targets.wheel]
    packages = ["/src/pact"]

  ########################################
  ## Hatch Environment Configuration
  ########################################
  [tool.hatch.envs]

    # Install dev dependencies in the default environment to simplify the developer
    # workflow.
    [tool.hatch.envs.default]
    extra-dependencies = ["hatchling", "hatch-vcs"]
    features           = ["devel"]
    installer          = "uv"
    # This is require to get around an incompatibility between hatch and uv
    # See: https://github.com/pypa/hatch/issues/1639
    pre-install-commands = ["uv pip install -e .[devel]"]

    # Update paths to ensure the shared library can be found
    # TODO: See if this can be overridden on a per-platform basis
    # https://github.com/pypa/hatch/discussions/2024
    # [tool.hatch.envs.default.overrides]
    # platform.windows.env-vars = { PATH = "{root}/src/pact_ffi;{env:PATH}" }

      [tool.hatch.envs.default.scripts]
      all                = ["example", "format", "lint", "test", "typecheck"]
      docs               = "mkdocs serve {args}"
      docs-build         = "mkdocs build {args}"
      example            = "pytest --numprocesses=1 examples/ {args}"
      format             = "ruff format {args}"
      lint               = "ruff check --output-format=full --show-fixes {args}"
      test               = "pytest tests/ {args}"
      typecheck          = ["typecheck-examples", "typecheck-src", "typecheck-tests"]
      typecheck-examples = "mypy examples/ {args}"
      typecheck-src      = "mypy src/ {args}"
      typecheck-tests    = "mypy tests/ {args}"

    # Test environment for running unit tests. This automatically tests against all
    # supported Python versions.
    [tool.hatch.envs.test]
    features  = ["devel-test"]
    installer = "uv"

    # Update paths to ensure the shared library can be found
    # TODO: See if this can be overridden on a per-platform basis
    # https://github.com/pypa/hatch/discussions/2024
    # [tool.hatch.envs.default.overrides]
    # platform.windows.env-vars = { PATH = "{root}/src/pact_ffi;{env:PATH}" }

      [[tool.hatch.envs.test.matrix]]
      python = ["3.10", "3.11", "3.12", "3.13", "3.9"]

################################################################################
## UV Workspace
################################################################################
[tool.uv]
  [tool.uv.sources]
  pact-python-cli = { workspace = true }
  pact-python-ffi = { workspace = true }

  [tool.uv.workspace]
  members = ["pact-python-cli", "pact-python-ffi"]

################################################################################
## PyTest Configuration
################################################################################
[tool.pytest]

  [tool.pytest.ini_options]
  addopts = [
    "--import-mode=importlib",
    # Coverage options
    "--cov-config=pyproject.toml",
    "--cov-report=xml",
    "--cov=pact",
    # Xdist options
    "--dist=worksteal",
    "--numprocesses=logical",
    # Rerun options
    "--rerun-except=assert",
    "--reruns=3",
  ]
  asyncio_default_fixture_loop_scope = "session"
  filterwarnings = [
    "ignore::DeprecationWarning:examples",
    "ignore::DeprecationWarning:pact",
    "ignore::DeprecationWarning:tests",
    "ignore::PendingDeprecationWarning:examples",
    "ignore::PendingDeprecationWarning:pact",
    "ignore::PendingDeprecationWarning:tests",
  ]
  pythonpath = "."

  log_date_format = "%H:%M:%S"
  log_format      = "%(asctime)s.%(msecs)03d [%(levelname)-8s] %(name)s: %(message)s"
  log_level       = "NOTSET"

  markers = [
    # Marker for tests that require a container
    "container",

    # Markers for the compatibility suite
    "consumer",
    "message",
    "provider",
  ]

################################################################################
## Coverage
################################################################################
[tool.coverage]

  [tool.coverage.paths]
  pact  = ["/src/pact"]
  tests = ["/examples", "/tests"]

  [tool.coverage.report]
  exclude_lines = [
    "@(abc\\.)?abstractmethod",   # Ignore abstract methods
    "if TYPE_CHECKING:",          # Ignore typing
    "if __name__ == .__main__.:", # Ignore non-runnable code
    "raise NotImplementedError",  # Ignore defensive assertions
  ]

################################################################################
## Ruff Configuration
################################################################################
[tool.ruff]

# TODO: Remove the explicity extend-exclude once astral-sh/ruff#6262 is fixed.
# https://github.com/pact-foundation/pact-python/issues/458
extend-exclude = [
  # "src/pact/*.py",
  # "src/pact/cli/*.py",
  # "src/tests/*.py",
  # "src/tests/cli/*.py",
  "src/pact/__init__.py",
  "src/pact/__version__.py",
  "src/pact/broker.py",
  "src/pact/cli/*.py",
  "src/pact/consumer.py",
  "src/pact/http_proxy.py",
  "src/pact/matchers.py",
  "src/pact/message_consumer.py",
  "src/pact/message_pact.py",
  "src/pact/message_provider.py",
  "src/pact/pact.py",
  "src/pact/provider.py",
  "src/pact/verifier.py",
  "src/pact/verify_wrapper.py",
  "tests/__init__.py",
  "tests/cli/*.py",
  "tests/conftest.py",
  "tests/test_broker.py",
  "tests/test_constants.py",
  "tests/test_consumer.py",
  "tests/test_http_proxy.py",
  "tests/test_matchers.py",
  "tests/test_message_consumer.py",
  "tests/test_message_pact.py",
  "tests/test_message_provider.py",
  "tests/test_pact.py",
  "tests/test_verifier.py",
  "tests/test_verify_wrapper.py",
]

  [tool.ruff.lint]
  select = ["ALL"]

  ignore = [
    "D200",   # Require single line docstrings to be on one line.
    "D203",   # Require blank line before class docstring
    "D212",   # Multi-line docstring summary must start at the first line
    "FIX002", # Forbid TODO in comments
    "TD002",  # Assign someone to 'TODO' comments

    # The following are disabled for compatibility with the formatter
    "COM812", # enforce trailing commas
    "ISC001", # require imports to be sorted
  ]

    [tool.ruff.lint.pyupgrade]
    keep-runtime-typing = true

    [tool.ruff.lint.pydocstyle]
    convention = "google"

    [tool.ruff.lint.isort]
    known-first-party = ["pact", "pact_cli", "pact_ffi"]

    [tool.ruff.lint.flake8-tidy-imports]
    ban-relative-imports = "all"

  [tool.ruff.format]
  docstring-code-format = true
  preview               = true

################################################################################
## Mypy Configuration
################################################################################
[tool.mypy]
exclude = '^(src/pact|tests|examples|examples/tests)/(?!v3).+\.py$'

################################################################################
## CI Build Wheel
################################################################################
[tool.cibuildwheel]

################################################################################
## Typos
################################################################################
[tool.typos]

  [tool.typos.default]
  extend-ignore-re = ["(?Rm)^.*(#|//|<!--)\\s*spellchecker:\\s*ignore"]

################################################################################
## Yamlfix
################################################################################
[tool.yamlfix]
line_length        = 100
section_whitelines = 1
sequence_style     = "block_style"
whitelines         = 1
