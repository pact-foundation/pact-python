[project]
name        = "pact-python"
description = "Tool for creating and verifying consumer-driven contracts using the Pact framework."
dynamic     = ["version"]

authors = [
  { name = "Matthew Balvanz", email = "matthew.balvanz@workiva.com" },
  { name = "Joshua Ellis", email = "josh@jpellis.me" },
]
maintainers = [{ name = "Joshua Ellis", email = "josh@jpellis.me" }]

readme = "README.md"
license = { file = "LICENSE" }
keywords = ["pact", "contract-testing", "testing"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Software Development :: Testing",
]

requires-python = ">=3.8"

# Dependencies of Pact Python should be specified using the broadest range
# compatible version unless:
#
# - A specific feature is required in a new minor release
# - A minor version address vulnerability which directly impacts Pact Python
dependencies = [
  "cffi              ~= 1.0",
  "click             ~= 8.0",
  "fastapi           ~= 0.0",
  "psutil            ~= 5.0",
  "requests          ~= 2.0",
  "six               ~= 1.0",
  "typing-extensions ~= 4.0 ; python_version < '3.10'",
  "uvicorn           ~= 0.0",
  "yarl              ~= 1.0",
]

[project.urls]
"Homepage"      = "https://pact.io"
"Repository"    = "https://github.com/pact-foundation/pact-python"
"Documentation" = "https://docs.pact.io"
"Bug Tracker"   = "https://github.com/pact-foundation/pact-python/issues"
"Changelog"     = "https://github.com/pact-foundation/pact-python/blob/master/CHANGELOG.md"

[project.scripts]
pact-verifier = "pact.cli.verify:main"

[project.optional-dependencies]
# Linting and formatting tools use a more narrow specification to ensure
# developper consistency. All other dependencies are as above.
types = [
  "mypy           ==1.8.0",
  "types-cffi     ~= 1.0",
  "types-requests ~= 2.0",
]
test = [
  "aiohttp[speedups] ~= 3.0",
  "coverage[toml]    ~= 7.0",
  "flask[async]      ~= 3.0",
  "httpx             ~= 0.0",
  "mock              ~= 5.0",
  "pytest            ~=8.0",
  "pytest-asyncio    ~= 0.0",
  "pytest-bdd        ~= 7.0",
  "pytest-cov        ~= 4.0",
  "testcontainers    ~= 3.0",
]
dev = ["pact-python[types]", "pact-python[test]", "ruff==0.3.1"]

################################################################################
## Hatch Build Configuration
################################################################################

[build-system]
requires = [
  "cffi",
  "hatch-vcs",
  "hatchling",
  "packaging",
  "requests",
  "setuptools ; python_version >= '3.12'",
]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/pact/__version__.py"

[tool.hatch.build.targets.sdist]
include = [
  # Source
  "/src/pact/**/*.py",
  "/src/pact/**/*.pyi",
  "/src/pact/**/py.typed",

  # Metadata
  "*.md",
  "LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["/src/pact"]
include = [
  # Source
  "/src/pact/**/*.py",
  "/src/pact/**/*.pyi",
  "/src/pact/**/py.typed",
]
artifacts = [
  "/src/pact/bin/*",     # Ruby executables
  "/src/pact/lib/*",     # Ruby library
  "/src/pact/v3/_ffi.*", # Rust library
]

[tool.hatch.build.targets.wheel.hooks.custom]

################################################################################
## Hatch Environment Configuration
################################################################################

# Install dev dependencies in the default environment to simplify the developer
# workflow.
[tool.hatch.envs.default]
features = ["dev"]
extra-dependencies = [
  "hatchling",
  "packaging",
  "requests",
  "cffi",
  "setuptools ; python_version >= '3.12'",
]

[tool.hatch.envs.default.scripts]
lint       = "ruff check --output-format=full --show-fixes {args}"
typecheck  = "mypy {args:.}"
format     = "ruff format {args}"
test       = "pytest tests/ {args}"
example    = "pytest examples/ {args}"
all        = ["format", "lint", "typecheck", "test", "example"]
docs       = "mkdocs serve {args}"
docs-build = "mkdocs build {args}"

# Test environment for running unit tests. This automatically tests against all
# supported Python versions.
[tool.hatch.envs.test]
features = ["test"]

[[tool.hatch.envs.test.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

################################################################################
## PyTest Configuration
################################################################################

[tool.pytest.ini_options]
pythonpath = "."
addopts = [
  "--import-mode=importlib",
  "--cov-config=pyproject.toml",
  "--cov=pact",
  "--cov-report=xml",
]
filterwarnings = [
  "ignore::DeprecationWarning:pact",
  "ignore::DeprecationWarning:tests",
  "ignore::PendingDeprecationWarning:pact",
  "ignore::PendingDeprecationWarning:tests",
]

markers = [
  # Markers for the compatibility suite
  "consumer",
]

################################################################################
## Coverage
################################################################################

[tool.coverage.paths]
pact  = ["/src/pact"]
tests = ["/examples", "/tests"]

[tool.coverage.report]
exclude_lines = [
  "if __name__ == .__main__.:", # Ignore non-runnable code
  "if TYPE_CHECKING:",          # Ignore typing
  "raise NotImplementedError",  # Ignore defensive assertions
  "@(abc\\.)?abstractmethod",   # Ignore abstract methods
]

################################################################################
## Ruff Configuration
################################################################################

[tool.ruff]
target-version = "py38"

# TODO: Remove the explicity extend-exclude once astral-sh/ruff#6262 is fixed.
# https://github.com/pact-foundation/pact-python/issues/458
extend-exclude = [
  # "src/pact/*.py",
  # "src/pact/cli/*.py",
  # "src/tests/*.py",
  # "src/tests/cli/*.py",
  "src/pact/__init__.py",
  "src/pact/__version__.py",
  "src/pact/broker.py",
  "src/pact/cli/*.py",
  "src/pact/constants.py",
  "src/pact/consumer.py",
  "src/pact/http_proxy.py",
  "src/pact/matchers.py",
  "src/pact/message_consumer.py",
  "src/pact/message_pact.py",
  "src/pact/message_provider.py",
  "src/pact/pact.py",
  "src/pact/provider.py",
  "src/pact/verifier.py",
  "src/pact/verify_wrapper.py",
  "tests/__init__.py",
  "tests/cli/*.py",
  "tests/conftest.py",
  "tests/test_broker.py",
  "tests/test_constants.py",
  "tests/test_consumer.py",
  "tests/test_http_proxy.py",
  "tests/test_matchers.py",
  "tests/test_message_consumer.py",
  "tests/test_message_pact.py",
  "tests/test_message_provider.py",
  "tests/test_pact.py",
  "tests/test_verifier.py",
  "tests/test_verify_wrapper.py",
]

[tool.ruff.lint]
select = ["ALL"]

ignore = [
  "D200",   # Require single line docstrings to be on one line.
  "D203",   # Require blank line before class docstring
  "D212",   # Multi-line docstring summary must start at the first line
  "ANN101", # `self` must be typed
  "ANN102", # `cls` must be typed
  "FIX002", # Forbid TODO in comments
  "TD002",  # Assign someone to 'TODO' comments

  # The following are disabled for compatibility with the formatter
  "COM812", # enforce trailing commas
  "ISC001", # require imports to be sorted
]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["pact"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.format]
preview               = true
docstring-code-format = true

################################################################################
## Mypy Configuration
################################################################################

[tool.mypy]
exclude = '^(src/pact|tests)/(?!v3).+\.py$'

################################################################################
## CI Build Wheel
################################################################################
[tool.cibuildwheel]
skip = "pp38-*"
before-build = """
rm -rvf src/pact/v3/bin
rm -rvf src/pact/v3/data
rm -rvf src/pact/v3/lib
mv -v src/pact/v3/_ffi.pyi _ffi.pyi
rm -rvf src/pact/v3/_ffi.*
mv -v _ffi.pyi src/pact/v3/_ffi.pyi
"""
test-command = """
python -c \
"from pact import EachLike; \
assert \
  EachLike(1).generate() \
  == {'json_class': 'Pact::ArrayLike', 'contents': 1, 'min': 1}; \
import pact.v3.ffi; \
assert isinstance(pact.v3.ffi.version(), str);\""""

[tool.cibuildwheel.macos]
# The repair tool unfortunately did not like the bundled Ruby distributable.
# TODO: Check whether delocate-wheel can be configured.
repair-wheel-command = ""

[tool.cibuildwheel.windows]
before-build = [
  'FOR /R src\pact\v3 %G IN (_ffi.*) DO IF NOT %~nxG == _ffi.pyi DEL /F /Q "%G"',
  'IF EXIST src\pact\v3\bin\ RMDIR /S /Q src\pact\v3\bin',
  'IF EXIST src\pact\v3\data\ RMDIR /S /Q src\pact\v3\data',
  'IF EXIST src\pact\v3\lib\ RMDIR /S /Q src\pact\v3\lib',
]
