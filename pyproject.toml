#:schema https://json.schemastore.org/pyproject.json
[project]
description = "Tool for creating and verifying consumer-driven contracts using the Pact framework."
name        = "pact-python"

dynamic  = ["version"]
keywords = ["contract-testing", "pact", "testing"]
license  = { file = "LICENSE" }
readme   = "README.md"

authors = [
  { name = "Joshua Ellis", email = "josh@jpellis.me" },
  { name = "Matthew Balvanz", email = "matthew.balvanz@workiva.com" },
]
maintainers = [{ name = "Joshua Ellis", email = "josh@jpellis.me" }]

classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python",
  "Topic :: Software Development :: Testing",
]

requires-python = ">=3.9"

# Dependencies of Pact Python should be specified using the broadest range
# compatible version unless:
#
# - A specific feature is required in a new minor release
# - A minor version address vulnerability which directly impacts Pact Python
dependencies = [
  "cffi              ~=1.0",
  "click             ~=8.0",
  "fastapi           ~=0.0",
  "psutil            ~=6.0",
  "requests          ~=2.0",
  "six               ~=1.0",
  "typing-extensions ~=4.0 ; python_version < '3.10'",
  "uvicorn           ~=0.0",
  "yarl              ~=1.0",
]

  [project.urls]
  "Bug Tracker"   = "https://github.com/pact-foundation/pact-python/issues"
  "Changelog"     = "https://github.com/pact-foundation/pact-python/blob/main/CHANGELOG.md"
  "Documentation" = "https://docs.pact.io"
  "Homepage"      = "https://pact.io"
  "Repository"    = "https://github.com/pact-foundation/pact-python"

  [project.scripts]
  pact-verifier = "pact.cli.verify:main"

  [project.optional-dependencies]
  # Linting and formatting tools use a more narrow specification to ensure
  # developper consistency. All other dependencies are as above.
  devel = ["pact-python[devel-types,devel-docs,devel-test]", "ruff==0.9.4"]
  devel-docs = [
    "mkdocs-literate-nav~=0.6",
    "mkdocs-material[imaging]~=9.4",
    "mkdocs-section-index~=0.3",
    "mkdocs_gen_files~=0.5",
    "mkdocstrings[python]~=0.23",
    "mkdocs~=1.5",
  ]
  devel-test = [
    "aiohttp[speedups]~=3.0",
    "coverage[toml]~=7.0",
    "flask[async]~=3.0",
    "httpx~=0.0",
    "mock~=5.0",
    "pytest-asyncio~=0.0",
    "pytest-bdd~=8.0",
    "pytest-cov~=6.0",
    "pytest-rerunfailures~=15.0",
    "pytest-xdist~=3.0",
    "pytest~=8.0",
    "testcontainers~=4.0",
  ]
  devel-types = ["mypy==1.15.0", "types-cffi~=1.0", "types-requests~=2.0"]

[build-system]
build-backend = "hatchling.build"
requires = [
  "cffi",
  "hatch-vcs",
  "hatchling",
  "packaging",
  "requests",
  "setuptools ; python_version >= '3.12'",
]

################################################################################
## Hatch Configuration
################################################################################
[tool.hatch]

  [tool.hatch.version]
  source = "vcs"

  [tool.hatch.build]

    [tool.hatch.build.hooks.vcs]
    version-file = "src/pact/__version__.py"

    [tool.hatch.build.targets.sdist]
    include = [
      # Source
      "/src/pact/**/*.py",
      "/src/pact/**/*.pyi",
      "/src/pact/**/py.typed",

      # Metadata
      "*.md",
      "LICENSE",
    ]

    [tool.hatch.build.targets.wheel]
    artifacts = [
      "/src/pact/bin/*",     # Ruby executables
      "/src/pact/lib/*",     # Ruby library
      "/src/pact/v3/_ffi.*", # Rust library
    ]
    include = [
      # Source
      "/src/pact/**/*.py",
      "/src/pact/**/*.pyi",
      "/src/pact/**/py.typed",
    ]
    packages = ["/src/pact"]

      [tool.hatch.build.targets.wheel.hooks.custom]

  ########################################
  ## Hatch Environment Configuration
  ########################################
  [tool.hatch.envs]

    # Install dev dependencies in the default environment to simplify the developer
    # workflow.
    [tool.hatch.envs.default]
    extra-dependencies = [
      "cffi",
      "hatchling",
      "packaging",
      "requests",
      "setuptools ; python_version >= '3.12'",
    ]
    features = ["devel"]
    installer = "uv"

      [tool.hatch.envs.default.scripts]
      all        = ["example", "format", "lint", "test", "typecheck"]
      docs       = "mkdocs serve {args}"
      docs-build = "mkdocs build {args}"
      example    = "pytest --numprocesses=1 examples/ {args}"
      format     = "ruff format {args}"
      lint       = "ruff check --output-format=full --show-fixes {args}"
      test       = "pytest tests/ {args}"
      typecheck  = "mypy {args:.}"

    # Test environment for running unit tests. This automatically tests against all
    # supported Python versions.
    [tool.hatch.envs.test]
    features  = ["devel-test"]
    installer = "uv"

      [[tool.hatch.envs.test.matrix]]
      python = ["3.10", "3.11", "3.12", "3.13", "3.9"]

################################################################################
## PyTest Configuration
################################################################################
[tool.pytest]

  [tool.pytest.ini_options]
  addopts = [
    "--import-mode=importlib",
    # Coverage options
    "--cov-config=pyproject.toml",
    "--cov-report=xml",
    "--cov=pact",
    # Xdist options
    "--dist=worksteal",
    "--numprocesses=logical",
    # Rerun options
    "--rerun-except=assert",
    "--reruns=3",
  ]
  asyncio_default_fixture_loop_scope = "session"
  filterwarnings = [
    "ignore::DeprecationWarning:examples",
    "ignore::DeprecationWarning:pact",
    "ignore::DeprecationWarning:tests",
    "ignore::PendingDeprecationWarning:examples",
    "ignore::PendingDeprecationWarning:pact",
    "ignore::PendingDeprecationWarning:tests",
  ]
  pythonpath = "."

  log_date_format = "%H:%M:%S"
  log_format      = "%(asctime)s.%(msecs)03d [%(levelname)-8s] %(name)s: %(message)s"
  log_level       = "NOTSET"

  markers = [
    # Marker for tests that require a container
    "container",

    # Markers for the compatibility suite
    "consumer",
    "message",
    "provider",
  ]

################################################################################
## Coverage
################################################################################
[tool.coverage]

  [tool.coverage.paths]
  pact  = ["/src/pact"]
  tests = ["/examples", "/tests"]

  [tool.coverage.report]
  exclude_lines = [
    "@(abc\\.)?abstractmethod",   # Ignore abstract methods
    "if TYPE_CHECKING:",          # Ignore typing
    "if __name__ == .__main__.:", # Ignore non-runnable code
    "raise NotImplementedError",  # Ignore defensive assertions
  ]

################################################################################
## Ruff Configuration
################################################################################
[tool.ruff]

# TODO: Remove the explicity extend-exclude once astral-sh/ruff#6262 is fixed.
# https://github.com/pact-foundation/pact-python/issues/458
extend-exclude = [
  # "src/pact/*.py",
  # "src/pact/cli/*.py",
  # "src/tests/*.py",
  # "src/tests/cli/*.py",
  "src/pact/__init__.py",
  "src/pact/__version__.py",
  "src/pact/broker.py",
  "src/pact/cli/*.py",
  "src/pact/constants.py",
  "src/pact/consumer.py",
  "src/pact/http_proxy.py",
  "src/pact/matchers.py",
  "src/pact/message_consumer.py",
  "src/pact/message_pact.py",
  "src/pact/message_provider.py",
  "src/pact/pact.py",
  "src/pact/provider.py",
  "src/pact/verifier.py",
  "src/pact/verify_wrapper.py",
  "tests/__init__.py",
  "tests/cli/*.py",
  "tests/conftest.py",
  "tests/test_broker.py",
  "tests/test_constants.py",
  "tests/test_consumer.py",
  "tests/test_http_proxy.py",
  "tests/test_matchers.py",
  "tests/test_message_consumer.py",
  "tests/test_message_pact.py",
  "tests/test_message_provider.py",
  "tests/test_pact.py",
  "tests/test_verifier.py",
  "tests/test_verify_wrapper.py",
]

  [tool.ruff.lint]
  select = ["ALL"]

  ignore = [
    "D200",   # Require single line docstrings to be on one line.
    "D203",   # Require blank line before class docstring
    "D212",   # Multi-line docstring summary must start at the first line
    "FIX002", # Forbid TODO in comments
    "TD002",  # Assign someone to 'TODO' comments

    # The following are disabled for compatibility with the formatter
    "COM812", # enforce trailing commas
    "ISC001", # require imports to be sorted
  ]

    [tool.ruff.lint.pyupgrade]
    keep-runtime-typing = true

    [tool.ruff.lint.pydocstyle]
    convention = "google"

    [tool.ruff.lint.isort]
    known-first-party = ["pact"]

    [tool.ruff.lint.flake8-tidy-imports]
    ban-relative-imports = "all"

  [tool.ruff.format]
  docstring-code-format = true
  preview               = true

################################################################################
## Mypy Configuration
################################################################################
[tool.mypy]
exclude = '^(src/pact|tests|examples|examples/tests)/(?!v3).+\.py$'

################################################################################
## CI Build Wheel
################################################################################
[tool.cibuildwheel]
before-build = """
rm -rvf src/pact/v3/bin
rm -rvf src/pact/v3/data
rm -rvf src/pact/v3/lib
mv -v src/pact/v3/_ffi.pyi _ffi.pyi
rm -rvf src/pact/v3/_ffi.*
mv -v _ffi.pyi src/pact/v3/_ffi.pyi
"""
skip = "pp*"
test-command = """
python -c \
"from pact import EachLike; \
assert \
  EachLike(1).generate() \
  == {'json_class': 'Pact::ArrayLike', 'contents': 1, 'min': 1}; \
import pact.v3.ffi; \
assert isinstance(pact.v3.ffi.version(), str);\""""

  [tool.cibuildwheel.macos]
  # The repair tool unfortunately did not like the bundled Ruby distributable.
  # TODO: Check whether delocate-wheel can be configured.
  repair-wheel-command = ""

  [tool.cibuildwheel.windows]
  before-build = [
    'FOR /R src\pact\v3 %G IN (_ffi.*) DO IF NOT %~nxG == _ffi.pyi DEL /F /Q "%G"',
    'IF EXIST src\pact\v3\bin\ RMDIR /S /Q src\pact\v3\bin',
    'IF EXIST src\pact\v3\data\ RMDIR /S /Q src\pact\v3\data',
    'IF EXIST src\pact\v3\lib\ RMDIR /S /Q src\pact\v3\lib',
  ]

################################################################################
## Typos
################################################################################
[tool.typos]

  [tool.typos.default]
  extend-ignore-re = ["(?Rm)^.*(#|//|<!--)\\s*spellchecker:\\s*ignore"]

################################################################################
## Yamlfix
################################################################################
[tool.yamlfix]
line_length        = 100
section_whitelines = 1
sequence_style     = "block_style"
whitelines         = 1
