#:schema https://json.schemastore.org/any.json
# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

<!-- markdownlint-disable no-duplicate-heading -->
<!-- markdownlint-disable emph-style -->
<!-- markdownlint-disable strong-style -->

"""
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] _{{ timestamp | date(format="%Y-%m-%d") }}_
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        -   {% if commit.scope %}_({{ commit.scope }})_ {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }}\
                {% if commit.breaking and commit.breaking_description %}
                    {{ "    " }}\
                    > {{
                        commit.breaking_description
                        | split(pat="\n")
                        | join(sep=" ")
                        | replace(from="  ", to=" ")
                        | replace(from="  ", to=" ")
                        | replace(from="  ", to=" ")
                        | upper_first
                    }}\
                {% endif %}\
    {% endfor %}
{% endfor %}
{% if github.contributors %}\
    ### Contributors
    {% for contributor in github.contributors %}\
        {% if contributor.username and contributor.username is ending_with("[bot]") %}{% continue %}{% endif %}
        -   @{{ contributor.username }}\
    {% endfor %}
{% endif %}

"""# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
# template for the changelog footer
footer = """
<!-- generated by git-cliff on {{ now() | date(format="%Y-%m-%d") }}-->
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = []
# render body even when there are no releases to process
# render_always = true
# output file path
output = "CHANGELOG.md"

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Remove the PR number added by GitHub when merging PR in UI
  { pattern = '\s*\(#([0-9]+)\)$', replace = "" },
  # Check spelling of the commit with https://github.com/crate-ci/typos
  { pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
  # Ignore deps commits from the changelog
  { message = "^(chore|fix)\\(deps.*\\)", skip = true },
  { message = "^chore: update changelog.*", skip = true },
  # Group commits by type
  { group = "<!-- 00 -->🚀 Features", message = "^feat" },
  { group = "<!-- 01 -->🐛 Bug Fixes", message = "^fix" },
  { group = "<!-- 50 -->🚜 Refactor", message = "^refactor" },
  { group = "<!-- 51 -->⚡ Performance", message = "^perf" },
  { group = "<!-- 52 -->🎨 Styling", message = "^style" },
  { group = "<!-- 60 -->📚 Documentation", message = "^docs" },
  { group = "<!-- 80 -->🧪 Testing", message = "^test" },
  { group = "<!-- 98 -->◀️ Revert", message = "^revert" },
  { group = "<!-- 99 -->⚙️ Miscellaneous Tasks", message = "^chore" },
  { group = "<!-- 99 -->� Other", message = ".*" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"

[remote.github]
owner = "pact-foundation"
repo  = "pact-python"
